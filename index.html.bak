<!DOCTYPE html>
<html lang="ro">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no, viewport-fit=cover">
    <title>Body Dashboard - Sorin</title>
    <!-- Librării JavaScript: Firebase, Chart.js, Adaptor de date și Plugin-ul de Adnotări (NOU!) -->
    <script src="https://www.gstatic.com/firebasejs/9.15.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.15.0/firebase-firestore-compat.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-annotation@3.0.1/dist/chartjs-plugin-annotation.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-zoom"></script>
    
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary-orange: #FF7A00;
            --secondary-green: #34C759;
            --danger-red: #FF3B30;
            --light-bg: #F9FAFB;
            --card-bg: #FFFFFF;
            --text-primary: #1F2937;
            --text-secondary: #6B7280;
            --border-color: #E5E7EB;
            --font-family: 'Inter', sans-serif;
        }
        * { box-sizing: border-box; -webkit-tap-highlight-color: transparent; }
        html { scroll-behavior: smooth; }
        body { margin: 0; font-family: var(--font-family); background-color: var(--light-bg); color: var(--text-primary); }
        .container { max-width: 1200px; margin: 0 auto; padding: 20px; }
        header { margin-bottom: 24px; }
        header h1 { font-size: 32px; font-weight: 700; margin: 0; }
        .dashboard-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 20px; }
        .card { background-color: var(--card-bg); border-radius: 20px; padding: 24px; box-shadow: 0 4px_12px rgba(0,0,0,0.05); }
        .card h2 { font-size: 20px; margin: 0 0 20px 0; font-weight: 600; }
        .stats-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(120px, 1fr)); gap: 16px; }
        .stat h3 { margin: 0; color: var(--text-secondary); font-size: 14px; font-weight: 500; }
        .stat p { margin: 4px 0 8px; font-size: 28px; font-weight: 600; background: linear-gradient(45deg, var(--primary-orange), #FFB800); -webkit-background-clip: text; -webkit-text-fill-color: transparent; }
        .stat small { color: var(--text-secondary); font-size: 12px; }
        .chart-container { margin-top: 16px; height: 300px; } /* Înălțime fixă pentru consistență */
        .fab { position: fixed; bottom: 30px; right: 30px; width: 60px; height: 60px; background: linear-gradient(45deg, var(--primary-orange), #FFA500); color: white; border-radius: 50%; border: none; font-size: 36px; line-height: 60px; text-align: center; box-shadow: 0 4px 15px rgba(255, 122, 0, 0.4); cursor: pointer; z-index: 1000; transition: transform 0.2s; }
        .fab:hover { transform: scale(1.1); }
        .modal-overlay { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); display: flex; justify-content: center; align-items: flex-end; z-index: 1001; opacity: 0; visibility: hidden; transition: opacity 0.3s, visibility 0.3s; }
        .modal-overlay.active { opacity: 1; visibility: visible; }
        .modal-content { background: var(--card-bg); padding: 24px; border-radius: 24px 24px 0 0; width: 100%; max-width: 500px; transform: translateY(100%); transition: transform 0.3s ease-out; }
        .modal-overlay.active .modal-content { transform: translateY(0); }
        .modal-content h2 { margin-top: 0; }
        .modal-form { display: flex; flex-direction: column; gap: 16px; }
        .modal-form input { background-color: var(--light-bg); border: 1px solid var(--border-color); color: var(--text-primary); padding: 14px; border-radius: 12px; font-size: 16px; }
        .modal-form button { background: linear-gradient(45deg, var(--primary-orange), #FFA500); color: white; border: none; padding: 16px; font-size: 16px; font-weight: 600; border-radius: 12px; cursor: pointer; }
        .toast { position: fixed; bottom: -100px; left: 50%; transform: translateX(-50%); background-color: var(--secondary-green); color: white; padding: 16px 24px; border-radius: 12px; z-index: 1002; transition: bottom 0.5s ease; font-weight: 500; box-shadow: 0 4px 12px rgba(0,0,0,0.1); }
        .toast.show { bottom: 30px; }
        .chart-controls {
            display: flex;
            gap: 8px;
            margin-bottom: 8px;
        }

        .chart-button {
            background: var(--card-bg);
            border: 1px solid var(--border-color);
            color: var(--text-secondary);
            padding: 6px 12px;
            border-radius: 8px;
            font-size: 14px;
            cursor: pointer;
            transition: all 0.2s;
        }

        .chart-button:hover {
            background: var(--light-bg);
            color: var(--text-primary);
        }

        .chart-container {
            position: relative;
        }
    </style>
</head>
<body>
    <div class="container">
        <header><h1>Dashboard Corporal</h1></header>
        <div class="dashboard-grid">
            <div class="card">
                <h2>Metrici Cheie</h2>
                <div class="stats-grid">
                    <div class="stat"><h3>Greutate</h3><p id="stat-weight">-- kg</p><small>Țintă: <span id="target-weight">--</span></small></div>
                    <div class="stat"><h3>IMC</h3><p id="stat-bmi">--</p><small>Țintă: 18.5-24.9</small></div>
                    <div class="stat"><h3>Talie</h3><p id="stat-waist">-- cm</p><small>Țintă: < 94 cm</small></div>
                    <div class="stat"><h3>WHtR</h3><p id="stat-whtr">--</p><small>Țintă: < 0.5</small></div>
                    <div class="stat"><h3>WHR</h3><p id="stat-whr">--</p><small>Țintă: < 0.90</small></div>
                    <div class="stat"><h3>Șold</h3><p id="stat-hips">-- cm</p><small>Țintă: 98-102 cm</small></div>
                </div>
            </div>
            <div class="card">
                <h2>Estimări Metabolice</h2>
                <div class="stats-grid">
                    <div class="stat"><h3>BMR</h3><p id="stat-bmr">-- kcal</p><small>Energie în repaus</small></div>
                    <div class="stat"><h3>TDEE</h3><p id="stat-tdee">-- kcal</p><small>Mentenanță calorică</small></div>
                </div>
            </div>
            <div class="card" style="grid-column: 1 / -1;">
                <h2>Progres Greutate (kg)</h2>
                <div class="chart-controls">
                    <button class="chart-button" data-chart="weight" data-action="zoomIn">+</button>
                    <button class="chart-button" data-chart="weight" data-action="zoomOut">-</button>
                    <button class="chart-button" data-chart="weight" data-action="reset">Reset</button>
                </div>
                <div class="chart-container"><canvas id="weightChart"></canvas></div>
            </div>
            <div class="card" style="grid-column: 1 / -1;">
                <h2>Progres IMC</h2>
                <div class="chart-controls">
                    <button class="chart-button" data-chart="bmi" data-action="zoomIn">+</button>
                    <button class="chart-button" data-chart="bmi" data-action="zoomOut">-</button>
                    <button class="chart-button" data-chart="bmi" data-action="reset">Reset</button>
                </div>
                <div class="chart-container"><canvas id="bmiChart"></canvas></div>
            </div>
            <div class="card" style="grid-column: 1 / -1;">
                <h2>Progres Măsurători (cm)</h2>
                <div class="chart-controls">
                    <button class="chart-button" data-chart="measurements" data-action="zoomIn">+</button>
                    <button class="chart-button" data-chart="measurements" data-action="zoomOut">-</button>
                    <button class="chart-button" data-chart="measurements" data-action="reset">Reset</button>
                </div>
                <div class="chart-container"><canvas id="measurementsChart"></canvas></div>
            </div>
        </div>
    </div>
    
    <button class="fab" id="add-entry-btn">+</button>
    <div class="modal-overlay" id="entry-modal">
        <div class="modal-content">
            <h2>Înregistrare Nouă</h2>
            <form id="entry-form" class="modal-form">
                <input type="date" id="date" required>
                <input type="number" step="0.1" id="weight" placeholder="Greutate (kg)">
                <input type="number" step="0.1" id="shoulders" placeholder="Umeri (cm)">
                <input type="number" step="0.1" id="chest" placeholder="Bust (cm)">
                <input type="number" step="0.1" id="waist" placeholder="Talie (cm)">
                <input type="number" step="0.1" id="hips" placeholder="Șold (cm)">
                <input type="number" id="kcal" placeholder="Kcal arse (Apple Watch)">
                <button type="submit">Salvează Înregistrarea</button>
            </form>
        </div>
    </div>
    <div class="toast" id="toast-notification"></div>

<script>
document.addEventListener('DOMContentLoaded', () => {
    // --- CONFIGURARE PERSONALĂ ---
    const USER_CONFIG = {
        BIRTH_DATE: new Date('1985-09-08'),
        HEIGHT_CM: 172,
        ACTIVITY_FACTOR: 1.55 
    };

    // --- CONFIGURARE FIREBASE ---
    const firebaseConfig = {
        apiKey: "AIzaSyDa2r9t3kWGUpoiuqRaaKvYpWlJ_V8-yMI",
        authDomain: "body-dashboard-sorin.firebaseapp.com",
        projectId: "body-dashboard-sorin",
        storageBucket: "body-dashboard-sorin.firebasestorage.app",
        messagingSenderId: "895437811384",
        appId: "1:895437811384:web:6f735fd10b35bf448fce4d",
        measurementId: "G-JYGMGKFQB8"
    };

    firebase.initializeApp(firebaseConfig);
    const db = firebase.firestore();

    const entryModal = document.getElementById('entry-modal');
    const entryForm = document.getElementById('entry-form');
    let weightChart, measurementsChart, bmiChart;

    document.getElementById('add-entry-btn').addEventListener('click', () => {
        entryForm.reset();
        document.getElementById('date').valueAsDate = new Date();
        entryModal.classList.add('active');
    });
    entryModal.addEventListener('click', (e) => {
        if (e.target === entryModal) entryModal.classList.remove('active');
    });
    entryForm.addEventListener('submit', handleFormSubmit);

    async function handleFormSubmit(e) {
        e.preventDefault();
        const entry = {
            date: document.getElementById('date').value,
            weight_kg: parseFloat(document.getElementById('weight').value) || null,
            shoulders_cm: parseFloat(document.getElementById('shoulders').value) || null,
            chest_cm: parseFloat(document.getElementById('chest').value) || null,
            waist_cm: parseFloat(document.getElementById('waist').value) || null,
            hips_cm: parseFloat(document.getElementById('hips').value) || null,
            kcal_burnt: parseInt(document.getElementById('kcal').value) || null
        };

        // Eliminăm proprietățile null
        Object.keys(entry).forEach(key => {
            if (entry[key] === null) {
                delete entry[key];
            }
        });

        try {
            await db.collection('checkins').add(entry);
            entryModal.classList.remove('active');
            showToast('Date salvate cu succes!');
            loadAllData();
        } catch (error) {
            showToast('Eroare la salvare: ' + error.message, true);
        }
    }

    async function loadAllData() {
        try {
            const snapshot = await db.collection('checkins').orderBy('date').get();
            const rawData = snapshot.docs.map(doc => doc.data());
            
            // Procesăm datele și calculăm metricile
            const processedData = rawData.map(d => {
                const height_m = USER_CONFIG.HEIGHT_CM / 100;
                const weight = parseFloat(d.weight_kg);
                const waist = parseFloat(d.waist_cm);
                const hips = parseFloat(d.hips_cm);
                
                return {
                    ...d,
                    weight_kg: weight,
                    waist_cm: waist,
                    hips_cm: hips,
                    bmi: weight ? (weight / (height_m * height_m)) : null,
                    whtr: waist ? (waist / USER_CONFIG.HEIGHT_CM) : null,
                    whr: (waist && hips) ? (waist / hips) : null
                };
            });

            updateDashboard(processedData);
            renderCharts(processedData);
        } catch(error) {
            console.error("Eroare la încărcarea datelor:", error);
            showToast("Nu am putut încărca datele.", true);
        }
    }

    function updateDashboard(data) {
        if (data.length === 0) return;
        
        const lastEntry = data[data.length - 1];
        
        // Calculăm vârsta și valorile derivate
        const age = (new Date() - USER_CONFIG.BIRTH_DATE) / (1000 * 60 * 60 * 24 * 365.25);
        const height_m = USER_CONFIG.HEIGHT_CM / 100;
        const weight_kg = lastEntry.weight_kg;

        // Calculăm indicii
        const bmi = weight_kg ? (weight_kg / (height_m * height_m)).toFixed(1) : '--';
        const whtr = lastEntry.whtr ? lastEntry.whtr.toFixed(2) : '--';
        const whr = lastEntry.whr ? lastEntry.whr.toFixed(2) : '--';
        
        // Calculăm valorile metabolice
        const bmr = weight_kg ? Math.round(10 * weight_kg + 6.25 * USER_CONFIG.HEIGHT_CM - 5 * age + 5) : '--';
        const tdee = bmr !== '--' ? Math.round(bmr * USER_CONFIG.ACTIVITY_FACTOR) : '--';

        // Calculăm greutățile ideale
        const ideal_weight_low = (18.5 * (height_m * height_m)).toFixed(1);
        const ideal_weight_high = (24.9 * (height_m * height_m)).toFixed(1);

        // Actualizăm interfața
        document.getElementById('stat-weight').textContent = weight_kg ? `${weight_kg} kg` : '--';
        document.getElementById('stat-bmi').textContent = bmi;
        document.getElementById('stat-waist').textContent = lastEntry.waist_cm ? `${lastEntry.waist_cm} cm` : '--';
        document.getElementById('stat-whtr').textContent = whtr;
        document.getElementById('stat-whr').textContent = whr;
        document.getElementById('stat-hips').textContent = lastEntry.hips_cm ? `${lastEntry.hips_cm} cm` : '--';
        document.getElementById('stat-bmr').textContent = bmr !== '--' ? `${bmr} kcal` : '--';
        document.getElementById('stat-tdee').textContent = tdee !== '--' ? `${tdee} kcal` : '--';
        document.getElementById('target-weight').textContent = `${ideal_weight_low}-${ideal_weight_high} kg`;
    }

    function setupChartControls() {
        document.querySelectorAll('.chart-button').forEach(button => {
            button.addEventListener('click', () => {
                const chartType = button.dataset.chart;
                const action = button.dataset.action;
                let chart;

                switch(chartType) {
                    case 'weight':
                        chart = weightChart;
                        break;
                    case 'bmi':
                        chart = bmiChart;
                        break;
                    case 'measurements':
                        chart = measurementsChart;
                        break;
                }

                if (!chart) return;

                switch(action) {
                    case 'zoomIn':
                        chart.zoom(1.1);
                        break;
                    case 'zoomOut':
                        chart.zoom(0.9);
                        break;
                    case 'reset':
                        chart.resetZoom();
                        break;
                }
            });
        });
    }

    function renderCharts(data) {
        // Calculăm data de început pentru ultima lună
        const now = new Date();
        const oneMonthAgo = new Date(now.getFullYear(), now.getMonth() - 1, now.getDate());

        const chartOptions = (annotations) => ({
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                x: {
                    type: 'time',
                    time: {
                        unit: 'day',
                        displayFormats: {
                            day: 'dd MMM'
                        }
                    },
                    ticks: {
                        color: 'var(--text-secondary)'
                    },
                    grid: {
                        color: 'var(--border-color)'
                    }
                },
                y: {
                    beginAtZero: false,
                    ticks: {
                        color: 'var(--text-secondary)'
                    },
                    grid: {
                        color: 'var(--border-color)'
                    }
                }
            },
            plugins: {
                legend: {
                    labels: {
                        color: 'var(--text-secondary)',
                        usePointStyle: true,
                        pointStyle: 'circle'
                    }
                },
                annotation: { annotations },
                zoom: {
                    zoom: {
                        wheel: {
                            enabled: true
                        },
                        pinch: {
                            enabled: true
                        },
                        mode: 'xy'
                    },
                    pan: {
                        enabled: true,
                        mode: 'xy'
                    }
                }
            }
        });

        if (weightChart) weightChart.destroy();
        const weightCtx = document.getElementById('weightChart').getContext('2d');
        weightChart = new Chart(weightCtx, {
            type: 'line', 
            data: { 
                datasets: [{ 
                    label: 'Greutate', 
                    data: data.map(d => ({x: d.date, y: d.weight_kg})), 
                    borderColor: 'var(--primary-orange)', 
                    backgroundColor: 'rgba(255, 122, 0, 0.1)', 
                    tension: 0.2, 
                    pointRadius: 4, 
                    fill: true 
                }] 
            },
            options: chartOptions({
                box1: { 
                    type: 'box', 
                    yMin: 18.5 * Math.pow(USER_CONFIG.HEIGHT_CM / 100, 2), 
                    yMax: 24.9 * Math.pow(USER_CONFIG.HEIGHT_CM / 100, 2), 
                    backgroundColor: 'rgba(52, 199, 89, 0.1)', 
                    borderColor: 'rgba(52, 199, 89, 0.3)' 
                }
            })
        });
        
        if (bmiChart) bmiChart.destroy();
        const bmiCtx = document.getElementById('bmiChart').getContext('2d');
        bmiChart = new Chart(bmiCtx, {
            type: 'line', 
            data: { 
                datasets: [{ 
                    label: 'IMC', 
                    data: data.map(d => ({x: d.date, y: d.bmi})), 
                    borderColor: 'var(--primary-orange)', 
                    backgroundColor: 'rgba(255, 122, 0, 0.1)', 
                    tension: 0.2, 
                    pointRadius: 4, 
                    fill: true 
                }] 
            },
            options: chartOptions({
                box1: { 
                    type: 'box', 
                    yMin: 18.5, 
                    yMax: 24.9, 
                    backgroundColor: 'rgba(52, 199, 89, 0.1)', 
                    borderColor: 'rgba(52, 199, 89, 0.3)' 
                }
            })
        });

        if (measurementsChart) measurementsChart.destroy();
        const measureCtx = document.getElementById('measurementsChart').getContext('2d');
        measurementsChart = new Chart(measureCtx, {
            type: 'line', 
            data: { 
                datasets: [
                    { 
                        label: 'Talie', 
                        data: data.map(d => ({x: d.date, y: d.waist_cm})), 
                        borderColor: '#FF9500',
                        tension: 0.2,
                        pointRadius: 4
                    },
                    { 
                        label: 'Bust', 
                        data: data.map(d => ({x: d.date, y: d.chest_cm})), 
                        borderColor: '#FF2D55',
                        tension: 0.2,
                        pointRadius: 4
                    },
                    { 
                        label: 'Șold', 
                        data: data.map(d => ({x: d.date, y: d.hips_cm})), 
                        borderColor: '#AF52DE',
                        tension: 0.2,
                        pointRadius: 4
                    }
                ]
            },
            options: chartOptions({})  // Am eliminat linia de risc
        });

        setupChartControls();
    }

    function showToast(message, isError = false) {
        const toast = document.getElementById('toast-notification');
        toast.textContent = message;
        toast.style.backgroundColor = isError ? 'var(--danger-red)' : 'var(--secondary-green)';
        toast.classList.add('show');
        setTimeout(() => toast.classList.remove('show'), 3000);
    }
    
    loadAllData();
});
</script>
</body>
</html>
